import os

import json, math

import psycopg_pool
import psycopg
from datetime import datetime, date

DATABASE_URL = "postgresql://postgres:postgres@localhost:5432/gradcafe"
pool = psycopg_pool.ConnectionPool(os.environ[DATABASE_URL])

JSON_PATH = "../module_2/llm_extend_applicant_data.json"


def load_json(path=JSON_PATH):
    with open(path, "r", encoding="utf-8") as f:
        data = json.load(f)
    return data

def to_date(added_date):
    if not added_date:
        return ""
    
    added_date_s = added_date.strip()
    try:
        return datetime.strptime(added_date_s, "%B %d, %Y").date()
    except ValueError:
        return ""


def to_float(gpa):
    if gpa in (None, ""):
        return ""
    
    gpa_s = str(gpa).replace("GPA", "").strip()
    try:
        gpa_f = float(gpa_s)
        if math.isfinite(gpa_f):
            return gpa_f
        else:
            return ""
    except Exception:
        return ""

#Get a connection from the pool.
conn = pool.getconn()

with conn.cursor() as cur:

  cur.execute("""
    DROP TABLE IF EXISTS courses;""")

  cur.execute("""
    DROP TABLE IF EXISTS students;""")

  cur.execute("""
    DROP TABLE IF EXISTS studentCourses;""")

  # Create our three tables
  cur.execute("""
    CREATE TABLE IF NOT EXISTS courses(
      id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      name TEXT,
      gpa REAL
      );""")

  cur.execute("""
      CREATE TABLE IF NOT EXISTS studentCourses(
      studentID int,
      courseID int
      );""")

  cur.execute("""
      CREATE TABLE IF NOT EXISTS students(
        id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        name TEXT
        );""")


  # Insert Data into our tables
  cur.execute("""
    INSERT INTO courses(id, name, gpa)
      VALUES (1, 'SQL Server', 3.2), (2, 'ASP.NET MVC', 3.5), (3,'MongoDB', 3.0), (4, 'Java', 2.5), (5, 'PHP', 3.3)
      ;""")

  cur.execute("""
    INSERT INTO students(id, name)
      VALUES (1, 'Sam'), (2, 'Mary'), (3, 'Tine')
    ;""")

  cur.execute("""
    INSERT INTO studentCourses(studentID, courseID)
      VALUES (1, 1), (1, 2), (1, 3), (2, 3), (2, 4), (3, 3), (3, 5)
  ;""")

  # Commit the changes to the database
  conn.commit()

# Close the connection
pool.putconn(conn)
conn.close()

def main():
    data = load_json()
    

