name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Cancel older, in-flight runs for the same branch
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Tests (Linux, Py${{ matrix.python-version }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]

    env:
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      PYTHONDONTWRITEBYTECODE: "1"
      PYTHONUTF8: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: |
            module_4/requirements.txt
            module_4/docs/requirements.txt

      - name: Install dependencies
        working-directory: module_4
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          # Optional: if you build docs in a later job, keep this line:
          # pip install -r docs/requirements.txt

      # Linting is optional but recommended. Uncomment any you use:
      # - name: Ruff (lint)
      #   working-directory: module_4
      #   run: |
      #     pip install ruff
      #     ruff check src tests

      # - name: Black (format check)
      #   working-directory: module_4
      #   run: |
      #     pip install black
      #     black --check .

      - name: Run tests with coverage (fail under 100%)
        working-directory: module_4
        shell: bash
        run: |
          pytest -q \
            --cov=src \
            --cov-report=term-missing \
            --cov-report=xml:coverage.xml \
            --cov-report=html:cov_html \
            --cov-fail-under=100
          # Save a human-readable proof file too
          python - <<'PY'
          from pathlib import Path
          import subprocess
          out = subprocess.check_output(["coverage", "report", "-m"], text=True)
          Path("coverage_summary.txt").write_text(out)
          PY

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: |
            module_4/.coverage
            module_4/coverage.xml
            module_4/coverage_summary.txt
            module_4/cov_html
          if-no-files-found: warn

  # ---------- OPTIONAL: build your Sphinx docs in CI ----------
  docs:
    name: Build docs
    runs-on: ubuntu-latest
    needs: test  # build docs only if tests passed; remove if you want independent
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: module_4/docs/requirements.txt

      - name: Install doc tools
        working-directory: module_4
        run: |
          python -m pip install -U pip
          pip install -r docs/requirements.txt

      - name: Build Sphinx (treat warnings as errors)
        working-directory: module_4
        run: |
          sphinx-build -b html -W -n -T docs/source docs/build/html

      - name: Upload docs artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docs-html
          path: module_4/docs/build/html
          if-no-files-found: warn
