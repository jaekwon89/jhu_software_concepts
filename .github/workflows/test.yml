# .github/workflows/test.yml
name: module_4 tests
on:
  push:
    paths: ["module_4/**", ".github/workflows/test.yml"]
  pull_request:
    paths: ["module_4/**"]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d postgres"
          --health-interval=5s --health-timeout=5s --health-retries=20

    env:
      # IMPORTANT: use the service host "postgres", not localhost
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/postgres
      PGHOST: postgres
      PGUSER: postgres
      PGPASSWORD: postgres
      PGDATABASE: postgres
      PGPORT: "5432"

    defaults:
      run:
        working-directory: module_4

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.12" }

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; else pip install flask pytest pytest-cov psycopg[binary]; fi

      - name: Wait for DB to be ready
        run: |
          python - <<'PY'
          import os, time
          from psycopg import connect, OperationalError
          dsn = os.environ["DATABASE_URL"]
          for i in range(30):
              try:
                  with connect(dsn) as conn, conn.cursor() as cur:
                      cur.execute("SELECT 1")
                      print("DB ready"); break
              except OperationalError as e:
                  print("DB not ready yet:", e)
                  time.sleep(1)
          else:
              raise SystemExit("DB never became ready")
          PY

      - name: Run tests with coverage
        run: |
          pytest -q --cov=src --cov-report=term-missing --cov-report=xml --cov-fail-under=1

      - name: Save coverage files
        if: always()
        run: |
          cp coverage.xml coverage_summary.txt || true
        shell: bash

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage
          path: |
            module_4/coverage.xml
            module_4/coverage_summary.txt
