name: module_4 tests

on:
  push:
    paths: ["module_4/**", ".github/workflows/test.yml"]
  pull_request:
    paths: ["module_4/**", ".github/workflows/test.yml"]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: gradcafe
        ports: ["5432:5432"]
        # The health check ensures the database is ready before the job starts.
        options: >-
          --health-cmd="pg_isready -U postgres -d gradcafe"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=10

    env:
      PGHOST: 127.0.0.1
      PGPORT: 5432
      PGUSER: postgres
      PGPASSWORD: postgres
      PGDATABASE: gradcafe
      DATABASE_URL: postgresql://postgres:postgres@127.0.0.1:5432/gradcafe
      # Define the Python version as an env var for easy updates
      PYTHON_VERSION: "3.12"

    defaults:
      run:
        working-directory: module_4

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          # Add caching for pip dependencies to speed up subsequent runs
          cache: 'pip'
          cache-dependency-path: module_4/requirements.txt # Or setup.py, pyproject.toml

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Added Ruff for fast linting and formatting checks
          pip install ruff
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install -e .
            pip install pytest pytest-cov psycopg[binary,pool] flask
          fi

      - name: Lint and format check with Ruff
        run: |
          # Check formatting (add --fix to apply changes)
          ruff format --check .
          # Check for linting errors
          ruff check .

      - name: Run tests with coverage
        run: |
          # Increased --cov-fail-under to a more meaningful value (e.g., 80%)
          # You can adjust this threshold to fit your project's standards.
          pytest -q --cov=src --cov-report=term-missing --cov-report=xml --cov-fail-under=80
          coverage report -m > coverage_summary.txt || true

      - name: Upload coverage XML report
        uses: actions/upload-artifact@v4
        # 'if: always()' ensures this step runs even if tests fail, for debugging.
        if: always()
        with:
          name: coverage-xml
          path: module_4/coverage.xml

      - name: Upload coverage summary report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-summary
          path: module_4/coverage_summary.txt