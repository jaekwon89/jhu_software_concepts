# .github/workflows/test.yml
name: module_4 tests

on:
  push:
    paths:
      - "module_4/**"
      - ".github/workflows/test.yml"
  pull_request:
    paths:
      - "module_4/**"

jobs:
  test:
    runs-on: ubuntu-latest

    # PostgreSQL service for tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # wait until the DB is ready
        options: >-
          --health-cmd="pg_isready -U postgres -d postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=10

    # Make the DB URL visible to your code under src/app/db.py
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres

    defaults:
      run:
        working-directory: module_4

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Upgrade pip & install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            # fallback: install what tests need
            pip install flask pytest pytest-cov psycopg[binary]
          fi

      # optional: prove we can connect before running pytest
      - name: Sanity check DB connection
        run: |
          python - << 'PY'
          import os
          from psycopg import connect
          dsn = os.environ["DATABASE_URL"]
          with connect(dsn) as conn, conn.cursor() as cur:
              cur.execute("SELECT 1;")
              print("DB OK:", cur.fetchone())
          PY

      - name: Run tests with coverage
        run: |
          pytest -q --cov=src --cov-report=term-missing --cov-report=xml --cov-fail-under=1

      - name: Upload coverage summary
        if: always()
        run: |
          python - << 'PY'
          from xml.etree import ElementTree as ET
          t = ET.parse('coverage.xml').getroot()
          totals = t.find('coverage').find('project').find('metrics') if t.tag!='coverage' else t.find('project/metrics')
          # fallback parser if schema differs
          print("coverage.xml saved")
          PY
          # Save a simple text artifact for the assignment
          echo "Coverage XML written; see job summary." > coverage_summary.txt
        shell: bash

      - name: Store coverage.xml and summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: |
            module_4/coverage.xml
            module_4/coverage_summary.txt
